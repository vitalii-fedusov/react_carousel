{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","images","step","frameSize","itemWidth","animationDuration","infinite","visibleImagesWidth","useState","translateValue","setTranslateValue","newTranslateValue","extremeTranslatePoint","handleeClick","event","currentButtonClasslist","currentTarget","classList","value","contains","Math","min","max","className","cn","type","onClick","style","width","transform","transition","gap","map","image","height","src","alt","indexOf","App","state","this","handleInfinite","setState","length","htmlFor","id","defaultValue","onChange","target","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a0f6af24.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Carousel.scss';\nimport cn from 'classnames';\n\ninterface Props {\n  images: string[],\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean,\n}\n\nconst Carousel: React.FC<Props> = ({\n  images,\n  step,\n  frameSize,\n  itemWidth,\n  animationDuration,\n  infinite,\n}) => {\n  const gap = 20;\n  const totalGapValue = gap * (frameSize - 1);\n  const visibleImagesWidth = itemWidth * frameSize + totalGapValue;\n\n  const [translateValue, setTranslateValue] = useState(0);\n\n  const newTranslateValue = step * (itemWidth + gap);\n\n  const allImagesWidth = (10 * itemWidth) + (9 * gap);\n  const extremeTranslatePoint = allImagesWidth - visibleImagesWidth;\n\n  const handleeClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n    const currentButton = event.currentTarget;\n    const currentButtonClasslist = currentButton.classList;\n    let value = 0;\n\n    if (currentButtonClasslist.contains('button-prev')) {\n      value = Math.min(translateValue + newTranslateValue, 0);\n    } else if (currentButtonClasslist.contains('button-next')) {\n      value = Math.max(\n        translateValue - newTranslateValue, (-extremeTranslatePoint),\n      );\n    }\n\n    if (infinite && -1 * value >= extremeTranslatePoint) {\n      value = 0;\n    }\n\n    setTranslateValue(value);\n  };\n\n  return (\n    <div className=\"Carousel\">\n      <div className=\"Carousel__container\">\n        <button\n          className={cn('button-prev', {\n            'button-prev__disabled': translateValue === 0,\n          })}\n          type=\"button\"\n          onClick={handleeClick}\n        >\n          <div className=\"button-prev__text\">&lt;</div>\n        </button>\n        <ul className=\"Carousel__list\" style={{ width: `${visibleImagesWidth}px` }}>\n          <div\n            className=\"Carousel__item-wrapper\"\n            style={{\n              transform: `translateX(${translateValue}px)`,\n              transition: `transform ${animationDuration}ms ease`,\n              gap: `${gap}px`,\n            }}\n          >\n            {images.map(image => (\n              <li\n                className=\"Carousel__item\"\n                key={image}\n                style={{ height: `${itemWidth}px` }}\n              >\n                <img\n                  src={image}\n                  alt={`${images.indexOf(image) + 1}`}\n                  style={{\n                    width: `${itemWidth}px`,\n                    height: `${itemWidth}px`,\n                  }}\n                />\n              </li>\n            ))}\n          </div>\n        </ul>\n        <button\n          className={cn('button-next', {\n            'button-next__disabled': translateValue === -extremeTranslatePoint,\n          })}\n          type=\"button\"\n          data-cy=\"next\"\n          onClick={handleeClick}\n        >\n          <div className=\"button-next__text\">&gt;</div>\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    step: 3,\n    frameSize: 3,\n    itemWidth: 130,\n    animationDuration: 1000,\n    infinite: false,\n  };\n\n  render() {\n    const {\n      images, step, frameSize, itemWidth, animationDuration, infinite,\n    } = this.state;\n\n    const handleStep\n      = (event: React.ChangeEvent<HTMLInputElement>) => this.setState({\n        step: +event.target.value,\n      });\n    const handleFrameSize\n      = (event: React.ChangeEvent<HTMLInputElement>) => this.setState({\n        frameSize: +event.target.value,\n      });\n    const handleItemWidth\n      = (event: React.ChangeEvent<HTMLInputElement>) => this.setState({\n        itemWidth: +event.target.value,\n      });\n    const handleAnimationDuration\n      = (event: React.ChangeEvent<HTMLInputElement>) => this.setState({\n        animationDuration: +event.target.value,\n      });\n    const handleInfinite\n      = () => {\n        if (this.state.infinite === false) {\n          this.setState({\n            infinite: true,\n          });\n        } else {\n          this.setState({\n            infinite: false,\n          });\n        }\n      };\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1 data-cy=\"title\">Carousel with {images.length} images</h1>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n        <div className=\"input-container\">\n          <label htmlFor=\"itemId\">item - width </label>\n          <input\n            id=\"itemId\"\n            defaultValue={itemWidth}\n            type=\"number\"\n            min=\"100\"\n            max=\"200\"\n            onChange={handleItemWidth}\n            value={itemWidth}\n          />\n          <h1>\n            frame-size\n            <input\n              type=\"number\"\n              min=\"1\"\n              max=\"10\"\n              onChange={handleFrameSize}\n              value={frameSize}\n            />\n          </h1>\n          <h1>\n            step\n            <input\n              type=\"number\"\n              min=\"1\"\n              max=\"5\"\n              onChange={handleStep}\n              value={step}\n            />\n          </h1>\n          <h1>\n            animation-duration\n            <input\n              type=\"number\"\n              min=\"100\"\n              max=\"5000\"\n              step=\"100\"\n              onChange={handleAnimationDuration}\n              value={animationDuration}\n            />\n          </h1>\n          {this.state.infinite === false\n            ? (\n              <button type=\"button\" onClick={handleInfinite}>\n                Infinite - false\n              </button>\n            )\n            : (\n              <button type=\"button\" onClick={handleInfinite}>\n                Infinite - true\n              </button>\n            )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}